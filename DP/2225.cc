#include <iostream>

// 0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하는 문제
// 덧셈의 순서가 바뀐 경우는 다른 경우로 세며, 한 개의 수를 여러 번 쓸 수도 있음

int N, K;
long long DP[201][201];

/*
N과 K로 표를 그렸을 때 DP[N][K] = DP[N - 1][K] + DP[N][K - 1]의 규칙을 찾을 수 있음
이 점화식이 유도되는 이유는 아래와 같은 두 경우의 수의 합이기 때문

1. K개로 이루어진 (N - 1) 중 0 하나의 값을 1로 바꾸면 K개의 숫자로 이루어진 N이 만들어짐
2. (K - 1)개로 이루어진 N에 한 개의 0을 추가하면 됨
*/

int main() {
	std::cin >> N >> K;

	// 0을 K개의 숫자로 만들 수 있는 경우의 수 : 1
	for (int i = 0; i <= N; ++i) {
		DP[1][i] = 1;
	}
	// 0 ~ N까지의 숫자를 한 개만 이용해서 만들 수 있는 경우의 수 : 1
	for (int i = 1; i <= K; ++i) {
		DP[i][0] = 1;
	}

	for (int i = 2; i <= K; ++i) {
		for (int j = 1; j <= N; ++j) {
			DP[i][j] = DP[i - 1][j] + DP[i][j - 1];
			DP[i][j] %= 1000000000;
		}
	}
	std::cout << DP[K][N];

	return 0;
}