#include <iostream>
#include <vector>
#define M 1000000000

// N이 주어졌을 때, 길이가 N인 계단 수의 갯수 구하는 문제
// 계단 수란 인접한 모든 자리의 차이가 1인 숫자를 의미함
// 정답을 1000000000로 나눈 나머지를 출력하면 됨

// DP[M][N] : M자릿수의 수 중 0~N으로 끝나는 수들을 의미
// 문제에서 M은 100 이하의 자연수이며, 0~9로 끝나는 모든 숫자들을 구해야하므로 M = 101, N = 10
long long DP[101][10];

int main() {
	int N;
	std::cin >> N;

	// 한 자리 숫자들은 모두 계단수
	// 즉 DP[1][i]는 한 자릿수 중 i로 끝나는 계단수의 갯수
	for (int i = 1; i <= 9; i++) {
		DP[1][i] = 1;
	}
	// 0으로 시작하는 수는 계단수가 아님
	DP[1][0] = 0;

	/*
		경우의 수를 따져보자
		1. (N-1)자리의 계단수가 0으로 끝날 경우 : N자리의 계단수는 뒤에 1만 붙을 수 있음 
		2. (N-1)자리의 계단수가 1~8으로 끝날 경우 : N자리의 계단수는 ((N-1)번째의 자릿수 - 1) 또는 ((N-1)번째의 자릿수 + 1)이 붙을 수 있음
		3. (N-1)자리의 계단수가 9로 끝날 경우 : N자리의 계단수는 뒤에 8만 붙을 수 있음 
	*/
	for (int i = 2; i <= N; i++) {
		for (int j = 0; j <= 9; j++) {
			if (j == 0)
				// 1번의 경우
				DP[i][j] = DP[i - 1][j + 1] % M;
			else if (j == 9)
				// 3번의 경우
				DP[i][j] = DP[i - 1][j - 1] % M;
			else
				// 2번의 경우; N-1자릿수의 계단수 중 j-1로 끝나는 경우와 j+1로 끝나는 경우 두 가지를 더하면 됨 
				DP[i][j] = (DP[i - 1][j - 1] + DP[i - 1][j + 1]) % M;
		}
	}
	
	// N자리의 계단수를 구해야함
	long long cnt = 0;
	for (int i = 0; i <= 9; i++) {
		cnt += DP[N][i];
	}

	std::cout << cnt % M << std::endl;

	return 0;
}